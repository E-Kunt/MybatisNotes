<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tk.mybatis.simple.mapper.UserMapper">

	<resultMap type="tk.mybatis.simple.model.SysUser" id="userMap">
		<id property="id" column="id"/>
		<result property="userName" column="user_name"/>
		<result property="userPassword" column="user_password"/>
		<result property="userEmail" column="user_email"/>
		<result property="userInfo" column="user_info"/>
		<result property="headImg" column="head_img" jdbcType="BLOB"/>
		<result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
	</resultMap>

	<select id="selectById" resultMap="userMap">
		select * from sys_user where id = #{id}
	</select>
	
	<!-- 未配置mapUnderscoreToCamelCase，需写别名映射 -->
	<!-- <select id="selectAll" resultType="SysUser">
		select id,
			user_name userName,
			user_password userPassword,
			user_email userEmail,
			user_info userInfo,
			head_img headImg,
			create_time createTime
		from sys_user
	</select> -->
	
	<!-- 配置了mapUnderscoreToCamelCase，可以不写别名 -->
	<select id="selectAll" resultType="SysUser">
		select id,
			user_name,
			user_password,
			user_email,
			user_info,
			head_img,
			create_time
		from sys_user
	</select>
	
	<!-- 结果含多个实体的值 -->
	<select id="selectRolesByUserId" resultType="SysRole">
		select
			r.id,
			r.role_name,
			r.enabled,
			r.create_by,
			r.create_time,
			u.user_name as "user.userName",
			u.user_email as "user.userEmail"
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
		where u.id = #{userId}
	</select>
	
	<!-- 插入，不配置自增主键 -->
	<insert id="insert">
		insert into sys_user(
			id, user_name, user_password, user_email,
			user_info, head_img, create_time)
		values(
			#{id}, #{userName}, #{userPassword}, #{userEmail},
			#{userInfo}, #{headImg, jdbcType=BLOB}, 
			#{createTime, jdbcType=TIMESTAMP}
		)
	</insert>
	
	<!-- 插入，useGeneratedKeys方式配置自增主键。
	使用<if>动态插入数据，user_email仅传入非空值，若传入为空值则使用默认值。-->
	<insert id="insert2" useGeneratedKeys="true" keyProperty="id">
		insert into sys_user(
			user_name, user_password, 
			<if test="userEmail != null and userEmail != ''">
			user_email,
			</if>
			user_info, head_img, create_time)
		values(
			#{userName}, #{userPassword}, 
			<if test="userEmail != null and userEmail != ''">
			#{userEmail},
			</if>
			#{userInfo}, #{headImg, jdbcType=BLOB}, 
			#{createTime, jdbcType=TIMESTAMP}
		)
	</insert>
	
	<!-- 插入，selectKey方式配置自增主键（MYSQL写法） -->
	<insert id="insert3">
		insert into sys_user(
			user_name, user_password, user_email,
			user_info, head_img, create_time)
		values(
			#{userName}, #{userPassword}, #{userEmail},
			#{userInfo}, #{headImg, jdbcType=BLOB}, 
			#{createTime, jdbcType=TIMESTAMP}
		)
		<selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
			select last_insert_id()
		</selectKey>
	</insert>
	
	<!-- 插入，selectKey方式配置自增主键（Oracle写法） -->
	<!-- <insert id="insert3">
		<selectKey keyColumn="id" resultType="long" keyProperty="id" order="BEFORE">
			select SEQ_ID.nextval from dual
		</selectKey>
		insert into sys_user(
			id, user_name, user_password, user_email,
			user_info, head_img, create_time)
		values(
			#{id}, #{userName}, #{userPassword}, #{userEmail},
			#{userInfo}, #{headImg, jdbcType=BLOB}, 
			#{createTime, jdbcType=TIMESTAMP}
		)
	</insert> -->
	
	<update id="updateById">
		update sys_user
		set user_name = #{userName},
			user_password = #{userPassword},
			user_email = #{userEmail},
			user_info = #{userInfo},
			head_img = #{headImg, jdbcType=BLOB},
			create_time = #{createTime, jdbcType=TIMESTAMP}
		where id = #{id}
	</update>
	
	<delete id="deleteById">
		delete from sys_user where id = #{id}
	</delete>
	
	<!-- 通过用户id和角色enabled状态查用户的角色信息。 -->
	<select id="selectRolesByUserIdAndRoleEnabled" resultType="SysRole">
		select
			r.id,
			r.role_name,
			r.enabled,
			r.create_by,
			r.create_time
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
		where u.id = #{userId} and r.enabled = #{enabled}
	</select>
	
	<!-- 通过用户id和角色enabled状态查用户的角色信息。多个参数是javabean的时候。 注意使用"."取值。-->
	<select id="selectRolesByUserAndRole" resultType="SysRole">
		select
			r.id,
			r.role_name,
			r.enabled,
			r.create_by,
			r.create_time
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
		where u.id = #{sysUser.id} and r.enabled = #{sysRole.enabled}
	</select>
	
	<!-- 演示if标签，根据动态条件查询角色信息。【注意“where 1=1”和“and”】-->
	<!-- <select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser">
		select
			id,
			user_name,
			user_password,
			user_email,
			user_info,
			head_img,
			create_time
		from sys_user
		where 1 = 1
		<if test="userName != null and userName != ''">
		and user_name like concat('%',#{userName},'%')
		</if>
		<if test="userEmail != null and userEmail != ''">
		and user_email = #{userEmail}
		</if>
	</select> -->
	
	<!-- 演示where标签，会自动剔除and和or。注意不必写where 1=1了。-->
	<!-- <select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser">
		select
			id,
			user_name,
			user_password,
			user_email,
			user_info,
			head_img,
			create_time
		from sys_user
		<where>
			<if test="userName != null and userName != ''">
			and user_name like concat('%',#{userName},'%')
			</if>
			<if test="userEmail != null and userEmail != ''">
			and user_email = #{userEmail}
			</if>
		</where>
	</select> -->
	
	<!-- 演示bind标签，支持多数据库语法，防止SQL注入-->
	<!--<select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser">
		select
			id,
			user_name,
			user_password,
			user_email,
			user_info,
			head_img,
			create_time
		from sys_user
		<where>
			<if test="userName != null and userName != ''">
				<bind name="userNameLike" value="'%' + userName + '%'"/>
				and user_name like #{userNameLike}
			</if>
			<if test="userEmail != null and userEmail != ''">
				and user_email = #{userEmail}
			</if>
		</where>
	</select> -->
	
	<!-- 演示if标签配合_databaseId参数来添加多数据库支持-->
	<select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser">
		select
			id,
			user_name,
			user_password,
			user_email,
			user_info,
			head_img,
			create_time
		from sys_user
		<where>
			<if test="userName != null and userName != ''">
				<if test="_databaseId == 'mysql'">
					and user_name like concat('%',#{userName},'%')
				</if>
				<if test="_databaseId == 'orcale'">
					and user_name like '%'||#{userName}||'%'
				</if>
			</if>
			<if test="userEmail != null and userEmail != ''">
				and user_email = #{userEmail}
			</if>
		</where>
	</select>
	
	<!-- 演示where标签对应的trim标签写法。注意："AND |OR "空格不能省-->
	<!-- <select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser">
		select
			id,
			user_name,
			user_password,
			user_email,
			user_info,
			head_img,
			create_time
		from sys_user
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="userName != null and userName != ''">
			and user_name like concat('%',#{userName},'%')
			</if>
			<if test="userEmail != null and userEmail != ''">
			and user_email = #{userEmail}
			</if>
		</trim>
	</select> -->
	
	<!-- 演示if标签，根据动态条件更新角色信息。【注意每个if标签的SQL后的“，”和最后还要更新"id=#{id}"】-->
	<!-- <update id="updateByIdSelective">
		update sys_user
		set 
			<if test="userName != null and userName != ''">
			user_name = #{userName},
			</if>
			<if test="userPassword != null and userPassword != ''">
			user_password = #{userPassword},
			</if>
			<if test="userEmail != null and userEmail != ''">
			user_email = #{userEmail},
			</if>
			<if test="userInfo != null and userInfo != ''">
			user_info = #{userInfo},
			</if>
			<if test="headImg != null">
			head_img = #{headImg, jdbcType=BLOB},
			</if>
			<if test="createTime != null">
			create_time = #{createTime, jdbcType=TIMESTAMP},
			</if>
			id = #{id}
		where id = #{id}
	</update> -->
	
	<!-- 演示set标签，会自动剔除末尾逗号。【注意：要保留"id=#{id}"】-->
	<!-- <update id="updateByIdSelective">
		update sys_user
		<set> 
			<if test="userName != null and userName != ''">
			user_name = #{userName},
			</if>
			<if test="userPassword != null and userPassword != ''">
			user_password = #{userPassword},
			</if>
			<if test="userEmail != null and userEmail != ''">
			user_email = #{userEmail},
			</if>
			<if test="userInfo != null and userInfo != ''">
			user_info = #{userInfo},
			</if>
			<if test="headImg != null">
			head_img = #{headImg, jdbcType=BLOB},
			</if>
			<if test="createTime != null">
			create_time = #{createTime, jdbcType=TIMESTAMP},
			</if>
			id = #{id},
		</set>
		where id = #{id}
	</update> -->
	
	<!-- 演示set标签对应的trim标签写法。-->
	<update id="updateByIdSelective">
		update sys_user
		<trim prefix="SET" suffixOverrides=","> 
			<if test="userName != null and userName != ''">
			user_name = #{userName},
			</if>
			<if test="userPassword != null and userPassword != ''">
			user_password = #{userPassword},
			</if>
			<if test="userEmail != null and userEmail != ''">
			user_email = #{userEmail},
			</if>
			<if test="userInfo != null and userInfo != ''">
			user_info = #{userInfo},
			</if>
			<if test="headImg != null">
			head_img = #{headImg, jdbcType=BLOB},
			</if>
			<if test="createTime != null">
			create_time = #{createTime, jdbcType=TIMESTAMP},
			</if>
			id = #{id},
		</trim>
		where id = #{id}
	</update>
	
	<!-- 演示choose when otherwise标签的用法-->
	<select id="selectByIdOrUserName" resultType="tk.mybatis.simple.model.SysUser">
		select id,
			user_name userName,
			user_password userPassword,
			user_email userEmail,
			user_info userInfo,
			head_img headImg,
			create_time createTime
		from sys_user
		where 1 = 1
		<choose>
			<when test="id != null">
			and id = #{id}
			</when>
			<when test="userName != null and userName != ''">
			and user_name = #{userName}
			</when>
			<otherwise>
			and 1 = 2
			</otherwise>
		</choose>
	</select>
	
	<!-- 演示foreach标签的用法,结合SQL的in-->
	<select id="selectByIdList" resultType="tk.mybatis.simple.model.SysUser">
		select id,
			user_name userName,
			user_password userPassword,
			user_email userEmail,
			user_info userInfo,
			head_img headImg,
			create_time createTime
		from sys_user
		where id in
		<foreach collection="list" open="(" close=")" separator="," item="id" index="i">
			#{id}	
		</foreach>
	</select>
	
	<!-- 演示foreach标签实现批量插入的用法--> 
	<!-- useGeneratedKeys="true" keyProperty="id" 【报错？】-->
	<insert id="insertList"> 
		insert into sys_user(
			user_name, user_password, user_email,
			user_info, head_img, create_time
		) values
		<foreach collection="list" item="user" separator=",">
			(
			#{user.userName}, #{user.userPassword}, #{user.userEmail},
			#{user.userInfo}, #{user.headImg, jdbcType=BLOB}, 
			#{user.createTime, jdbcType=TIMESTAMP}
			)
		</foreach>
	</insert>
	
	<!-- 演示foreach实现动态update -->
	<update id="updateByMap">
		update sys_user
		set
		<foreach collection="_parameter" item="val" index="key" separator=",">
			${key} = #{val}
		</foreach>
		where id = #{id}
	</update>
	
	<select id="selectUserAndRoleById" resultType="tk.mybatis.simple.model.SysUser">
		select 
		   	u.id, 
		   	u.user_name userName, 
		    u.user_password userPassword,
		    u.user_email userEmail,
		    u.user_info userInfo,
		    u.head_img headImg,
		    u.create_time createTime,
			r.id "role.id", 
			r.role_name "role.roleName", 
			r.enabled "role.enabled",
			r.create_by "role.createBy",
			r.create_time "role.createTime"
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
		where u.id = #{id}
	</select>
	
	<!-- 注意这里配置了columnPrefix="role_"，所以下面的SQL的SysRole表别名要加上role_前缀。
	（其实可以不配置，就不用加前缀） -->
	<!-- 一对一：嵌套组合2个resuletMap -->
	<resultMap id="userRoleMap" extends="userMap" type="tk.mybatis.simple.model.SysUser">
		<association property="role" columnPrefix="role_" resultMap="tk.mybatis.simple.mapper.RoleMapper.roleMap"/>
	</resultMap>
	
	<select id="selectUserAndRoleById2" resultMap="userRoleMap">
	    select 
	    	u.id, 
	    	u.user_name, 
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time,
			r.id role_id,
			r.role_name role_role_name, 
			r.enabled role_enabled,
			r.create_by role_create_by,
			r.create_time role_create_time
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
	    where u.id = #{id}
	</select>
	
	
	<!-- 一对一：组合resultMap和 内部嵌套查询的结果 
		注意：1.下面主查询结果多出的ur.role_id对应了【column="{id=role_id}"的role_id】，为嵌套查询传参.
			2.fetchType="lazy" 懒加载，得配置mybatis-config.xml的aggressiveLazyLoading = false才能生效
	-->
	<resultMap id="userRoleMapSelect" extends="userMap" type="tk.mybatis.simple.model.SysUser">
		<association property="role" column="{id=role_id}" fetchType="lazy"
			select="tk.mybatis.simple.mapper.RoleMapper.selectRoleById"/>
	</resultMap>
	
	<select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
	    select 
	    	u.id, 
	    	u.user_name, 
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time,
	        ur.role_id
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
	    where u.id = #{id}
	</select>
	
	<!-- 多对多：连续嵌套组合resuletMap 注意使用的是collection-->
	<resultMap id="userRoleListMap" extends="userMap" type="tk.mybatis.simple.model.SysUser">
		<collection property="roleList" columnPrefix="role_" resultMap="tk.mybatis.simple.mapper.RoleMapper.rolePrivilegeListMap"/>
	</resultMap>
	
	<!-- 注意最内层嵌套的列的别名前缀，"role_privilege_" -->
	<select id="selectAllUserAndRoles" resultMap="userRoleListMap">
	    select 
	    	u.id, 
	    	u.user_name, 
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time,
			r.id role_id,
			r.role_name role_role_name, 
			r.enabled role_enabled,
			r.create_by role_create_by,
			r.create_time role_create_time,
			p.id role_privilege_id,
			p.privilege_name role_privilege_privilege_name,
			p.privilege_url role_privilege_privilege_url
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
		inner join sys_role_privilege rp on r.id = rp.role_id
		inner join sys_privilege p on rp.privilege_id = p.id
	</select>
	
	
	<!-- 通过嵌套查询获取指定用户的信息，以及用户的角色和权限信息 -->
	<resultMap id="userRoleListMapSelect" extends="userMap" type="tk.mybatis.simple.model.SysUser">
		<collection property="roleList"
					fetchType="lazy"
					select="tk.mybatis.simple.mapper.RoleMapper.selectRoleByUserId"
					column="{userId=id}"/>
	</resultMap>
	
	<select id="selectAllUserAndRolesSelect" resultMap="userRoleListMapSelect">
	    select 
	    	u.id, 
	    	u.user_name, 
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time
		from sys_user u
		where u.id = #{id}
	</select>
</mapper>